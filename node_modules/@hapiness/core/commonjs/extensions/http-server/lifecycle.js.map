{"version":3,"file":"lifecycle.js","sourceRoot":"","sources":["../../../../src/extensions/http-server/lifecycle.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { HookManager } from '../../core/hook';\nimport { LifecycleEventsEnum, LifecycleHooksEnum } from './enums';\nimport { RouteBuilder } from './route';\nimport { CoreRoute } from './interfaces';\nimport { errorHandler } from '../../core/hapiness';\nimport { Request, ReplyWithContinue, Server } from 'hapi';\n\nexport class LifecycleManager {\n\n    /**\n     * Initialize the lifecycle hooks\n     * for a route\n     *\n     * @param  {MainModule} main\n     */\n    static routeLifecycle(server: Server, routes: CoreRoute[]): void {\n\n        server.ext(<any>LifecycleEventsEnum.OnPreAuth.toString(),\n        (request: Request, reply: ReplyWithContinue) =>\n            this.eventHandler(LifecycleHooksEnum.OnPreAuth, routes, request, reply)\n                .subscribe(\n                    _ => reply.continue(),\n                    _ => errorHandler(_)\n                )\n        );\n\n        server.ext(<any>LifecycleEventsEnum.OnPostAuth.toString(),\n            (request: Request, reply: ReplyWithContinue) =>\n                this.instantiateRoute(routes, request, reply)\n                    .subscribe(\n                        _ => reply.continue(),\n                        _ => errorHandler(_)\n                    )\n        );\n\n        server.ext(<any>LifecycleEventsEnum.OnPreHandler.toString(),\n            (request: Request, reply: ReplyWithContinue) =>\n                this.eventHandler(LifecycleHooksEnum.OnPreHandler, routes, request, reply)\n                    .subscribe(\n                        _ => reply.continue(),\n                        _ => errorHandler(_)\n                    )\n        );\n\n        server.ext(<any>LifecycleEventsEnum.OnPostHandler.toString(),\n            (request: Request, reply: ReplyWithContinue) =>\n                this.eventHandler(LifecycleHooksEnum.OnPostHandler, routes, request, reply)\n                    .subscribe(\n                        _ => reply.continue(),\n                        _ => errorHandler(_)\n                    )\n        );\n\n        server.ext(<any>LifecycleEventsEnum.OnPreResponse.toString(),\n            (request: Request, reply: ReplyWithContinue) =>\n                this.eventHandler(LifecycleHooksEnum.OnPreResponse, routes, request, reply)\n                    .subscribe(\n                        _ => reply.continue(),\n                        _ => errorHandler(_),\n                        () => request['_hapinessRoute'] = undefined\n                    )\n        );\n    }\n\n    /**\n     * Instantiate the route matching the request\n     * And trigger OnPreAuth hook\n     *\n     * @param  {CoreRoute[]} routes\n     * @param  {Request} request\n     * @param  {ReplyWithContinue} reply\n     * @returns Observable\n     */\n    private static instantiateRoute(routes: CoreRoute[], request: Request, reply: ReplyWithContinue): Observable<any> {\n        return Observable\n            .of(routes)\n            .map(_ => this.findRoute(request, _))\n            .filter(_ => !!(_ && _.token))\n            .flatMap(route =>\n                RouteBuilder\n                    .instantiateRouteAndDI(route, request)\n                    .map(_ => ({ route, instance: _ }))\n            )\n            .do(_ => request['_hapinessRoute'] = _.instance)\n            .defaultIfEmpty(null)\n            .flatMap(_ => this.eventHandler(LifecycleHooksEnum.OnPostAuth, routes, request, reply))\n    }\n\n    /**\n     * Find the matching route with\n     * path and method\n     *\n     * @param  {Request} request\n     * @param  {CoreRoute[]} routes\n     * @returns CoreRoute\n     */\n    private static findRoute(request: Request, routes: CoreRoute[]): CoreRoute {\n        const labels = this.arrayify(request.connection.settings.labels);\n        return routes\n            .find(r => ((r.method === request.route.method || r.method.indexOf(request.route.method) > -1) &&\n                (this.isRightLabels(labels, this.arrayify(r.labels))) &&\n                r.path === request.route.path));\n    }\n\n    /**\n     * Make sure to match the right route\n     * with the labels\n     *\n     * @param  {string[]=[]} labels\n     * @param  {string[]=[]} routeLabels\n     * @returns boolean\n     */\n    private static isRightLabels(labels: string[] = [], routeLabels: string[] = []): boolean {\n        if (labels.length === 0 || routeLabels.length === 0) {\n            return true;\n        } else {\n            return routeLabels.some(_ => labels.indexOf(_) > -1);\n        }\n    }\n\n    private static arrayify(data: any): any[] {\n        return [].concat(data).filter(_ => !!_);\n    }\n\n    /**\n     * Find the route and call\n     * the hook if the route component\n     * implements it\n     *\n     * @param  {eRouteLifecycleHooks} event\n     * @param  {MainModule} mainModule\n     * @param  {} request\n     * @param  {} reply\n     */\n    private static eventHandler(hook: LifecycleHooksEnum, routes: CoreRoute[],\n            request: Request, reply: ReplyWithContinue): Observable<any> {\n\n        return Observable\n            .of(routes)\n            .map(_ => this.findRoute(request, _))\n            .filter(_ => request['_hapinessRoute'] && HookManager.hasLifecycleHook(hook.toString(), _.token))\n            .flatMap(_ =>\n                HookManager\n                    .triggerHook(hook.toString(), _.token, request['_hapinessRoute'], [request, reply])\n                    .defaultIfEmpty(null)\n            )\n            .isEmpty()\n            .filter(_ => !!_);\n    }\n\n}\n"]}