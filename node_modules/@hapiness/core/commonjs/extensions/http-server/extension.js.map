{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/extensions/http-server/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    CoreModule,\n    OnExtensionLoad,\n    OnModuleInstantiated,\n    ExtensionWithConfig,\n    Extension,\n    OnShutdown,\n    ExtensionShutdown\n} from '../../core/interfaces';\nimport { DependencyInjection } from '../../core/di';\nimport { HookManager } from '../../core/hook';\nimport { extractMetadataByDecorator } from '../../core/metadata';\nimport { ModuleManager } from '../../core/module';\nimport { errorHandler } from '../../core/hapiness';\nimport { Lifecycle } from './decorators';\nimport { Type } from '../../core/decorators';\nimport { enumByMethod, LifecycleComponentEnum } from './enums';\nimport { LifecycleManager } from './lifecycle';\nimport { RouteBuilder } from './route';\nimport { ConnectionOptions, CoreRoute, HapiConfig, HTTPHandlerResponse } from './interfaces';\nimport { Observable } from 'rxjs';\nimport { RouteConfiguration, Server, Request, ReplyNoContinue, ReplyWithContinue } from 'hapi';\nimport { ExtensionShutdownPriority } from '../../core';\n\nexport class HttpServerExt implements OnExtensionLoad, OnModuleInstantiated, OnShutdown {\n\n    public static setConfig(config: HapiConfig): ExtensionWithConfig {\n        return {\n            token: HttpServerExt,\n            config\n        };\n    }\n\n    /**\n     * Initialize HapiJS Server\n     *\n     * @param  {CoreModule} module\n     * @param  {HapiConfig} config\n     * @returns Observable\n     */\n    onExtensionLoad(module: CoreModule, config: HapiConfig): Observable<Extension> {\n        return Observable\n            .of(new Server(config.options))\n            .flatMap(server => Observable\n                .of(Object.assign({}, config, { options: undefined }))\n                .map(_ => this.formatConnections(_))\n                .do(_ => _.forEach(connection => server.connection(connection)))\n                .map(_ => server)\n            )\n            .flatMap(server =>\n                Observable\n                    .of({\n                        instance: this,\n                        token: HttpServerExt,\n                        value: server\n                    })\n            )\n    }\n\n    /**\n     * Build Lifecycle components\n     * Add routes by modules\n     * Add Lifecycle handlers\n     * Start HapiJS Server\n     *\n     * @param  {CoreModule} module\n     * @param  {Server} server\n     * @returns Observable\n     */\n    onModuleInstantiated(module: CoreModule, server: Server): Observable<any> {\n        return Observable\n            .from(ModuleManager.getModules(module))\n            .flatMap(_ => this.instantiateLifecycle(_, server))\n            .flatMap(_ => this.registerPlugin(_, server))\n            .reduce((a, c) => a.concat(c), [])\n            .do(_ => LifecycleManager.routeLifecycle(server, _))\n            .flatMap(_ => server.start());\n    }\n\n    /**\n     * Shutdown HapiJS server extension\n     *\n     * @param  {CoreModule} module\n     * @param  {Server} server\n     * @returns ExtensionShutdown\n     */\n    onShutdown(module: CoreModule, server: Server): ExtensionShutdown {\n        return {\n            priority: ExtensionShutdownPriority.IMPORTANT,\n            resolver: Observable.fromPromise(server.stop())\n        }\n    }\n\n    /**\n     * Format the config provided\n     * to a list of ConnectionOptions\n     *\n     * @param  {HapiConfig} config\n     * @returns ConnectionOptions\n     */\n    private formatConnections(config: HapiConfig): ConnectionOptions[] {\n        return []\n            .concat(!!(<any>config).connections ?\n                (<any>config).connections :\n                config\n            )\n            .filter(_ => !!_)\n            .map(_ => <ConnectionOptions>_);\n    }\n\n    /**\n     * Register a HapiJS Plugin\n     *\n     * @param  {CoreModule} module\n     * @param  {Server} server\n     * @returns Observable\n     */\n    private registerPlugin(module: CoreModule, server: Server): Observable<CoreRoute[]> {\n        return this\n            .buildRoutes(module)\n            .filter(_ => !!_ && _.length > 0)\n            .flatMap(routes => Observable\n                .of(<any>this.registerHandler(routes))\n                .do(_ => _.attributes = { name: module.name, version: module.version })\n                .flatMap(_ => Observable\n                    .fromPromise(server.register(_))\n                    .map(__ => routes)\n                )\n            )\n            .defaultIfEmpty([]);\n    }\n\n    /**\n     * Add routes from CoreModule\n     *\n     * @param  {CoreRoute[]} module\n     * @returns Observable\n     */\n    private registerHandler(routes: CoreRoute[] = []): (s, o, n) => void {\n        return (server: Server, options, next) => {\n            routes\n                .forEach(_ => {\n                    const _server = !!_.labels ? server.select(_.labels) : server;\n                    _server.route(<RouteConfiguration>{\n                        method: _.method,\n                        path: _.path,\n                        config: Object.assign({\n                            handler: (request, reply) => this.httpHandler(request, reply, _)\n                        }, _.config)\n                    });\n                });\n            next();\n        }\n    }\n\n    /**\n     * Build CoreRoute based on a module\n     *\n     * @param  {CoreModule} module\n     * @returns Observable\n     */\n    private buildRoutes(module: CoreModule): Observable<CoreRoute[]> {\n        return Observable\n            .from(RouteBuilder.buildRoutes(module))\n            .toArray();\n    }\n\n    /**\n     * Trigger the http handler hook\n     * Reply automatically\n     *\n     * @param  {Request} request\n     * @param  {ReplyNoContinue} reply\n     * @param  {CoreRoute} route\n     * @returns void\n     */\n    private httpHandler(request: Request, reply: ReplyNoContinue, route: CoreRoute): void {\n        HookManager\n            .triggerHook(\n                enumByMethod(request.method).toString(),\n                route.token,\n                request['_hapinessRoute'],\n                [ request, reply ]\n            )\n            .map(_ => this.formatResponse(_))\n            .subscribe(\n                _ => {\n                    const repl = reply(_.response)\n                        .code(this.isValid(_.response) ? _.statusCode : 204);\n                    repl.headers = Object.assign(_.headers, repl.headers);\n                },\n                _ => {\n                    errorHandler(_, request);\n                    reply(_);\n                }\n            );\n    }\n\n    /**\n     * Format response to HTTPHandlerResponse object\n     *\n     * @param  {any} data\n     * @returns HTTPHandlerResponse\n     */\n    private formatResponse(data: any): HTTPHandlerResponse {\n        return {\n            statusCode: !!data ? data.statusCode || 200 : 200,\n            headers: !!data ? data.headers || {} : {},\n            response: !!data ? data.response || data : data\n        };\n    }\n\n    /**\n     * Check of response is not empty\n     *\n     * @param  {any} response\n     * @returns boolean\n     */\n    private isValid(response: any): boolean {\n        return typeof(response) !== 'undefined' && response !== null;\n    }\n\n     /**\n     * Initialize and instantiate lifecycle components\n     *\n     * @param  {CoreModule} module\n     * @param  {Server} server\n     */\n    private instantiateLifecycle(module: CoreModule, server: Server): Observable<CoreModule> {\n        return Observable\n            .from([].concat(module.declarations))\n            .filter(_ => !!_ && !!extractMetadataByDecorator(_, 'Lifecycle'))\n            .map(_ => ({ metadata: <Lifecycle>extractMetadataByDecorator(_, 'Lifecycle'), token: _ }))\n            .do(_ =>\n                server.ext(<any>_.metadata.event, (request: Request, reply: ReplyWithContinue) => {\n                    this\n                        .eventHandler(_.token, module, request, reply)\n                        .subscribe(\n                            () => {},\n                            err => errorHandler(err)\n                        )\n                })\n            )\n            .toArray()\n            .map(_ => module);\n    }\n\n    /**\n     * Lifecycle Event Handler\n     * Instantiate the Lifecycle component\n     * And trigger the hook\n     *\n     * @param  {Type<any>} lifecycle\n     * @param  {CoreModule} module\n     * @param  {Request} request\n     * @param  {ReplyWithContinue} reply\n     * @returns Observable\n     */\n    private eventHandler(lifecycle: Type<any>, module: CoreModule, request: Request, reply: ReplyWithContinue): Observable<any> {\n        return Observable\n            .of(lifecycle)\n            .flatMap(lc =>\n                DependencyInjection\n                    .instantiateComponent(lc, module.di)\n                    .flatMap(_ =>\n                        HookManager\n                            .triggerHook(LifecycleComponentEnum.OnEvent.toString(), lc, _, [request, reply])\n                    )\n            );\n    }\n}\n"]}