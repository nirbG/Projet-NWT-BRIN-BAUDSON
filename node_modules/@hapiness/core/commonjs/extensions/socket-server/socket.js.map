{"version":3,"file":"socket.js","sourceRoot":"","sources":["../../../../src/extensions/socket-server/socket.ts"],"names":[],"mappings":"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","sourcesContent":["import { connection, request as WSRequest } from 'websocket';\nimport { WebSocketRooms } from './rooms';\nimport { Subject, Observable } from 'rxjs/Rx';\nimport { InternalLogger } from '../../core/logger';\n\ninterface Message {\n    event: string;\n    data: any;\n}\n\nexport class Socket {\n\n    private static logger = new InternalLogger('module');\n\n    private data$ = new Subject<Message>();\n\n    private store: { [key: string]: any } = {};\n\n    constructor(\n        public request: WSRequest,\n        private _connection: connection,\n        private _rooms: WebSocketRooms\n    ) {\n        this.on('close', data => this.data$.complete());\n        this.on('error', err => this.data$.error(err));\n        this.on('*', data => this.data$.next(this.getJSON(data.utf8Data)));\n        Socket.logger.debug(`New socket... ${this.request.host}`);\n    }\n\n    /**\n     * Listen events\n     *\n     * @param  {string} event\n     * @param  {(data: any)=>void} callback\n     */\n    on(event: string, callback: (data: any) => void) {\n        switch (event) {\n            case '*':\n                this._connection.on('message', callback);\n                break;\n            case 'close':\n                this._connection.on(event, callback);\n                break;\n            case 'error':\n                this._connection.on(event, callback);\n                break;\n            default:\n                this._connection.on('message', message => {\n                    if (message.type === 'utf8') {\n                        const parsed = <Message>this.getJSON(message.utf8Data);\n                        if (parsed.event === event) {\n                            callback(parsed.data);\n                        }\n                    }\n                });\n        }\n    }\n\n    /**\n     * Listen data filtered by event\n     * in a Observable\n     *\n     * @param  {string} event\n     * @returns Observable\n     */\n    on$<T = any>(event: string): Observable<T> {\n        return this\n            .data$\n            .filter(_ => _ && _.event === event)\n            .map(_ => <T>_.data);\n    }\n\n    /**\n     * Listen to binary data\n     *\n     * @param  {(data:Buffer)=>void} callback\n     */\n    onBytes(callback: (data: Buffer) => void) {\n        this._connection.on('message', message => {\n            if (message.type === 'binary') {\n                callback(message.binaryData);\n            }\n        });\n    }\n\n    /**\n     * Send data\n     *\n     * @param  {string} event\n     * @param  {any} data\n     */\n    emit(event: string, data: any) {\n        this._connection.sendUTF(\n            JSON.stringify({\n                event,\n                data\n            })\n        );\n    }\n\n    /**\n     * Send bytes\n     *\n     * @param  {Buffer} data\n     */\n    emitBytes(data: Buffer) {\n        this._connection.sendBytes(data);\n    }\n\n    /**\n     * Close connection\n     */\n    close() {\n        this._connection.close();\n    }\n\n    join(room: string): Socket {\n        this._rooms.join(room, this);\n\n        /* Leave room when socket connection is closed */\n        this.on('close', () => {\n            this._rooms.leave(room, this);\n        });\n\n        return this;\n    }\n\n    leave(room: string): Socket {\n        this._rooms.leave(room, this);\n        return this;\n    }\n\n    setData(key: string, value: any): Socket {\n        this.store[key] = value;\n        return this;\n    }\n\n    getData(key: string): any {\n        return this.store[key];\n    }\n\n    private getJSON(data: string) {\n        try {\n            return JSON.parse(data);\n        } catch (e) {\n            /* istanbul ignore next */\n            return data;\n        }\n    }\n}\n"]}