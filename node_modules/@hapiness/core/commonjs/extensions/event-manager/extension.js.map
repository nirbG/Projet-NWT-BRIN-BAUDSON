{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/extensions/event-manager/extension.ts"],"names":[],"mappings":";;AACA,gDAA6C;AAC7C,qCAA0E;AAC1E,uCAAyC;AAEzC;IAEI;;;;;OAKG;IACH,eAAe,CAAC,MAAkB;QAC9B,OAAO,uBAAU;aACZ,EAAE,CAAC,IAAI,sBAAY,EAAE,CAAC;aACtB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACP,QAAQ,EAAE,IAAI;YACd,KAAK,EAAE,eAAe;YACtB,KAAK,EAAE,CAAC;SACX,CAAC,CAAC,CAAC;IACZ,CAAC;IAED;;;;;;OAMG;IACH,UAAU,CAAC,MAAkB,EAAE,OAAqB;QAChD,OAAO;YACH,QAAQ,EAAE,gCAAyB,CAAC,MAAM;YAC1C,QAAQ,EAAE,uBAAU,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;SAC3C,CAAA;IACL,CAAC;CACJ;AA/BD,0CA+BC","sourcesContent":["import { CoreModule, Extension, OnExtensionLoad, OnShutdown } from '../../core/interfaces';\nimport { Observable } from 'rxjs/Observable';\nimport { ExtensionShutdown, ExtensionShutdownPriority } from '../../core';\nimport { EventManager } from './manager';\n\nexport class EventManagerExt implements OnExtensionLoad, OnShutdown {\n\n    /**\n     * Initilization of the extension\n     *\n     * @param  {CoreModule} module\n     * @returns Observable\n     */\n    onExtensionLoad(module: CoreModule): Observable<Extension> {\n        return Observable\n            .of(new EventManager())\n            .map(_ => ({\n                instance: this,\n                token: EventManagerExt,\n                value: _\n            }));\n    }\n\n    /**\n     * Shutdown Event manager\n     *\n     * @param  {CoreModule} module\n     * @param  {EventManager} manager\n     * @returns ExtensionShutdown\n     */\n    onShutdown(module: CoreModule, manager: EventManager): ExtensionShutdown {\n        return {\n            priority: ExtensionShutdownPriority.NORMAL,\n            resolver: Observable.of(manager.close())\n        }\n    }\n}\n"]}