{"version":3,"file":"service.js","sourceRoot":"","sources":["../../../../src/extensions/event-manager/service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,qCAAgD;AAChD,yBAA8D;AAI9D,IAAa,YAAY,GAAzB;IAEI,YACqC,OAAqB;QAArB,YAAO,GAAP,OAAO,CAAc;IACvD,CAAC;IAEJ;;;;OAIG;IACH,EAAE,CAAC,IAAY;QACX,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;OAMG;IACH,IAAI,CAAC,IAAY,EAAE,IAAS;QACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;CAEJ,CAAA;AA1BY,YAAY;IADxB,iBAAU,EAAE;IAIJ,WAAA,aAAM,CAAC,kBAAe,CAAC,CAAA;qCAAkB,eAAY;GAHjD,YAAY,CA0BxB;AA1BY,oCAAY","sourcesContent":["import { Injectable, Inject } from '../../core';\nimport { EventManagerExt, EventManager, EventData } from './';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class EventService {\n\n    constructor(\n        @Inject(EventManagerExt) private manager: EventManager\n    ) {}\n\n    /**\n     * Add listener on type\n     *\n     * @returns EventData\n     */\n    on(type: string): Observable<EventData> {\n        return this.manager.on(type);\n    }\n\n    /**\n     * Send data for type\n     *\n     * @param  {string} type\n     * @param  {any} data\n     * @returns void\n     */\n    emit(type: string, data: any): void {\n        this.manager.emit(type, data);\n    }\n\n}\n"]}