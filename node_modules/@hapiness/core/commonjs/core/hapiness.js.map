{"version":3,"file":"hapiness.js","sourceRoot":"","sources":["../../../src/core/hapiness.ts"],"names":[],"mappings":";;AAAA,+BAAkC;AAElC,qCAA0C;AAE1C,mCAAsE;AACtE,qCAAyC;AACzC,iCAAqC;AACrC,yCAA2C;AAE3C,wBAAwB,KAAY,EAAE,IAAY;IAC9C,KAAK,CAAC,OAAO,GAAG,IAAI,IAAI,KAAK,KAAK,CAAC,OAAO,EAAE,CAAC;IAC7C,OAAO,KAAK,CAAC;AACjB,CAAC;AAED;IAQI;;;;;;;;;OASG;IACI,MAAM,CAAC,SAAS,CAAC,MAAiB,EAAE,UAAmD,EACtF,UAA4B,EAAE;QAElC,IAAI,OAAO,CAAC,QAAQ,KAAK,KAAK,EAAE;YAC5B,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAChC;QACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,IAAI;iBACC,QAAQ,CAAC,MAAM,CAAC;iBAChB,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,sBAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBACtC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;iBACzD,cAAc,EAAE;iBAChB,SAAS,CACN,IAAI,EACJ,CAAC,CAAC,EAAE;gBACA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC;gBAC3D,IAAI;qBACC,QAAQ,EAAE;qBACV,SAAS,CACN,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EACf,GAAG,CAAC,EAAE;oBACF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,GAAG,CAAC,OAAO,gCAAgC,CAAC,CAAC;oBAC1F,MAAM,CAAC,GAAG,CAAC,CAAC;oBACZ,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACpB,CAAC,CACJ,CAAC;YACV,CAAC,EACD,GAAG,EAAE,CAAC,OAAO,EAAE,CAClB,CAAC;QACV,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,QAAQ;QAClB,OAAO,IAAI;aACN,gBAAgB,EAAE;aAClB,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI;aACb,aAAa;aACb,QAAQ,CAAC,CAAC,CAAC,CACf,CAAC;IACV,CAAC;IAEO,MAAM,CAAC,qBAAqB;QAChC,IAAI;aACC,aAAa;aACb,OAAO;aACP,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;aAC7B,SAAS,CACN,CAAC,CAAC,EAAE;YACA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;YAChD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC,EACF,CAAC,CAAC,EAAE;YACA,YAAY,CAAC,CAAC,CAAC,CAAC;YAChB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,CAAC,CACJ,CAAC;IACV,CAAC;IAED;;;;OAIG;IACK,MAAM,CAAC,gBAAgB;QAC3B,OAAO,iBAAU;aACZ,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACjD,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,kBAAW;aAC1B,gBAAgB,CACb,0BAAkB,CAAC,UAAU,CAAC,QAAQ,EAAE,EACxC,CAAC,CAAC,KAAK,CACV,CACJ;aACA,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,kBAAW;aACpB,WAAW,CACR,0BAAkB,CAAC,UAAU,CAAC,QAAQ,EAAE,EACxC,CAAC,CAAC,KAAK,EACP,CAAC,CAAC,QAAQ,EACV,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CACpB,CACJ;aACA,OAAO,EAAE,CAAC;IACnB,CAAC;IAED;;;;;;;OAOG;IACK,MAAM,CAAC,cAAc,CAAC,UAAmD,EAAE,cAA0B,EACrG,OAAyB;QAC7B,OAAO,iBAAU;aACZ,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAC5C,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;aACvC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI;aACf,aAAa,CAAC,CAAC,EAAE,cAAc,EAAE,OAAO,CAAC;aACzC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,iBAAU,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CACrE;aACA,OAAO,EAAE;aACT,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;IAC1E,CAAC;IAED;;;;;;OAMG;IACK,MAAM,CAAC,iBAAiB,CAAC,gBAA6B,EAAE,cAA0B,EAClF,OAAyB;QAC7B,OAAO,iBAAU;aACZ,IAAI,CAAC,gBAAgB,CAAC;aACtB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;aACnD,OAAO,EAAE;aACT,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,sBAAa,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;aAC1D,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;aAClC,OAAO,CAAC,kBAAkB,CAAC,EAAE,CAC1B,iBAAU;aACL,IAAI,CAAC,gBAAgB,CAAC;aACtB,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI;aACb,kBAAkB,CAAC,CAAC,EAAE,kBAAkB,CAAC;aACzC,OAAO,CAAC,OAAO,CAAC,gBAAgB,IAAI,IAAI,CAAC,cAAc,CAAC;aACxD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,iBAAU,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CACrE;aACA,OAAO,EAAE;aACT,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,kBAAkB,CAAC,CACpC;aACA,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;aACxB,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC;IAED;;;;;OAKG;IACK,MAAM,CAAC,YAAY,CAAC,kBAA8B;QACtD,OAAO,iBAAU;aACZ,IAAI,CAAC,sBAAa,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;aAClD,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,mBAAW,CAAC,IAAI,CAAC;aACzC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,kBAAW;aACnB,gBAAgB,CAAC,kBAAU,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAC/D;aACA,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,kBAAW;aACpB,WAAW,CAAC,kBAAU,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,QAAQ,CAAC,CACtE;aACA,OAAO,EAAE;aACT,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAA;IACrC,CAAC;IAED;;;;;OAKG;IACK,MAAM,CAAC,SAAS,CAAC,kBAA8B;QACnD,OAAO,iBAAU;aACZ,EAAE,CAAC,kBAAkB,CAAC;aACtB,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,kBAAW;aACpB,WAAW,CACR,kBAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,EAC7B,kBAAkB,CAAC,KAAK,EACxB,kBAAkB,CAAC,QAAQ,EAC3B,IAAI,EACJ,KAAK,CACR,CACJ,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACK,MAAM,CAAC,QAAQ,CAAC,MAAiB;QACrC,OAAO,iBAAU;aACZ,EAAE,CAAC,MAAM,CAAC;aACV,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;aAC3B,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;aAC/B,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,iBAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClB,iBAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC,CACtE;aACA,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,UAAU,CAAC,CAAC;YACnC,iBAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClB,iBAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC,CACnF,CAAC;IACV,CAAC;IAED;;;;;OAKG;IACK,MAAM,CAAC,qBAAqB,CAAC,SAAS;QAC1C,IAAI,SAAS,IAAyB,SAAS,CAAC,KAAK,EAAE;YACnD,OAA4B,SAAS,CAAC;SACzC;QACD,OAAO;YACH,KAAK,EAAa,SAAS;YAC3B,MAAM,EAAE,EAAE;SACb,CAAC;IACN,CAAC;IAED;;;;;;OAMG;IACK,MAAM,CAAC,aAAa,CAAC,SAA8B,EAAE,MAAkB,EAAE,OAAyB;QACtG,OAAO,iBAAU;aACZ,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;aAC1C,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;aAC7D,SAAS,CAAC,QAAQ,CAAC,EAAE,CAClB,kBAAW;aACN,WAAW,CACR,0BAAkB,CAAC,eAAe,CAAC,QAAQ,EAAE,EAC7C,SAAS,CAAC,KAAK,EACf,QAAQ,EACR,CAAE,MAAM,EAAE,SAAS,CAAC,MAAM,CAAE,CAC/B;aACA,OAAO,CAAC,OAAO,CAAC,gBAAgB,IAAI,IAAI,CAAC,cAAc,CAAC;aACxD,KAAK,CAAC,CAAC,CAAC,EAAE;YACP,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE;gBACjC,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;aAC3C;YACD,OAAO,iBAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CACT;aACA,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;aACxB,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;aAC1B,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CACtB,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACK,MAAM,CAAC,kBAAkB,CAAC,SAAoB,EAAE,MAAkB;QACtE,OAAO,kBAAW;aACb,WAAW,CACR,0BAAkB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,EAClD,SAAS,CAAC,KAAK,EACf,SAAS,CAAC,QAAQ,EAClB,CAAE,MAAM,EAAE,SAAS,CAAC,KAAK,CAAE,CAC9B;aACA,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sBAAsB,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;aACxE,cAAc,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;;AAzRc,eAAM,GAAG,IAAI,uBAAc,CAAC,WAAW,CAAC,CAAC;AACzC,sBAAa,GAAG,IAAI,wBAAa,EAAE,CAAC;AACpC,uBAAc,GAAG,IAAI,CAAC;AANzC,4BA+RC;AAED;;;;;;;;GAQG;AACH,sBAA6B,KAAY,EAAE,IAAU;IACjD,iBAAU;SACL,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;SACtB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC;SAChC,OAAO,CAAC,CAAC,CAAC,EAAE,CACT,kBAAW;SACN,gBAAgB,CAAC,kBAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/D,kBAAW;aACN,WAAW,CACR,kBAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,EAC7B,CAAC,CAAC,KAAK,EACP,CAAC,CAAC,QAAQ,EACV,CAAE,KAAK,EAAE,IAAI,CAAE,EACf,KAAK,CACR,CAAC,CAAC;QACH,iBAAU;aACL,KAAK,CAAC,KAAK,CAAC,CACxB;SACA,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC;AAnBD,oCAmBC","sourcesContent":["import { Observable } from 'rxjs';\nimport { CoreModule, Extension, ExtensionWithConfig, BootstrapOptions, ExtensionShutdown } from './interfaces';\nimport { InternalLogger } from './logger';\nimport { Type } from './decorators';\nimport { ExtentionHooksEnum, ModuleEnum, ModuleLevel } from './enums';\nimport { ModuleManager } from './module';\nimport { HookManager } from './hook';\nimport { ShutdownUtils } from './shutdown';\n\nfunction extensionError(error: Error, name: string): Error {\n    error.message = `[${name}] ${error.message}`;\n    return error;\n}\n\nexport class Hapiness {\n\n    private static module: CoreModule;\n    private static extensions: Extension[];\n    private static logger = new InternalLogger('bootstrap');\n    private static shutdownUtils = new ShutdownUtils();\n    private static defaultTimeout = 5000;\n\n    /**\n     * Entrypoint to bootstrap a module\n     * will load the extentions and trigger\n     * module's hooks\n     *\n     * @param  {Type<any>} module\n     * @param  {Array<Type<any>|ExtensionWithConfig>} extensions?\n     * @param  {BootstrapOptions} options?\n     * @returns Promise\n     */\n    public static bootstrap(module: Type<any>, extensions?: Array<Type<any> | ExtensionWithConfig>,\n            options: BootstrapOptions = {}): Promise<void> {\n\n        if (options.shutdown !== false) {\n            this.handleShutdownSignals();\n        }\n        return new Promise((resolve, reject) => {\n            this\n                .checkArg(module)\n                .flatMap(_ => ModuleManager.resolve(_))\n                .flatMap(_ => this.loadExtensions(extensions, _, options))\n                .ignoreElements()\n                .subscribe(\n                    null,\n                    _ => {\n                        this.logger.debug(`bootstrap error caught [${_.message}]`);\n                        this\n                            .shutdown()\n                            .subscribe(\n                                () => reject(_),\n                                err => {\n                                    this.logger.debug(`bootstrap error caught [${err.message}], shutting down extensions...`);\n                                    reject(err);\n                                    process.exit(1);\n                                }\n                            );\n                    },\n                    () => resolve()\n                );\n        });\n    }\n\n    /**\n     * Force a shutdown\n     *\n     * @returns Observable\n     */\n    public static shutdown(): Observable<boolean> {\n        return this\n            .getShutdownHooks()\n            .flatMap(_ => this\n                .shutdownUtils\n                .shutdown(_)\n            );\n    }\n\n    private static handleShutdownSignals(): void {\n        this\n            .shutdownUtils\n            .events$\n            .flatMap(_ => this.shutdown())\n            .subscribe(\n                _ => {\n                    this.logger.debug('process shutdown triggered');\n                    process.exit(0);\n                 } ,\n                _ => {\n                    errorHandler(_);\n                    process.exit(1);\n                }\n            );\n    }\n\n    /**\n     * Retrieve all shutdown hooks\n     *\n     * @returns ExtensionShutdown[]\n     */\n    private static getShutdownHooks(): Observable<ExtensionShutdown[]> {\n        return Observable\n            .from([].concat(this.extensions).filter(e => !!e))\n            .filter(_ => !!_ && HookManager\n                .hasLifecycleHook(\n                    ExtentionHooksEnum.OnShutdown.toString(),\n                    _.token\n                )\n            )\n            .flatMap(_ => HookManager\n                .triggerHook(\n                    ExtentionHooksEnum.OnShutdown.toString(),\n                    _.token,\n                    _.instance,\n                    [module, _.value]\n                )\n            )\n            .toArray();\n    }\n\n    /**\n     * Load extensions\n     *\n     * @param  {Array<Type<any>|ExtensionWithConfig>} extensions\n     * @param  {CoreModule} moduleResolved\n     * @param  {BootstrapOptions} options?\n     * @returns Observable\n     */\n    private static loadExtensions(extensions:  Array<Type<any> | ExtensionWithConfig>, moduleResolved: CoreModule,\n            options: BootstrapOptions): Observable<void> {\n        return Observable\n            .from([].concat(extensions).filter(_ => !!_))\n            .map(_ => this.toExtensionWithConfig(_))\n            .concatMap(_ => this\n                .loadExtention(_, moduleResolved, options)\n                .catch(err => Observable.throw(extensionError(err, _.token.name)))\n            )\n            .toArray()\n            .flatMap(_ => this.instantiateModule(_, moduleResolved, options));\n    }\n\n    /**\n     * Instantiate module\n     *\n     * @param  {Extension[]} extensionsLoaded\n     * @param  {CoreModule} moduleResolved\n     * @returns Observable\n     */\n    private static instantiateModule(extensionsLoaded: Extension[], moduleResolved: CoreModule,\n            options: BootstrapOptions): Observable<void> {\n        return Observable\n            .from(extensionsLoaded)\n            .map(_ => ({ provide: _.token, useValue: _.value }))\n            .toArray()\n            .flatMap(_ => ModuleManager.instantiate(moduleResolved, _))\n            .flatMap(_ => this.callRegister(_))\n            .flatMap(moduleInstantiated =>\n                Observable\n                    .from(extensionsLoaded)\n                    .flatMap(_ => this\n                        .moduleInstantiated(_, moduleInstantiated)\n                        .timeout(options.extensionTimeout || this.defaultTimeout)\n                        .catch(err => Observable.throw(extensionError(err, _.token.name)))\n                    )\n                    .toArray()\n                    .map(_ => moduleInstantiated)\n            )\n            .do(_ => this.module = _)\n            .flatMap(_ => this.callStart(_));\n    }\n\n    /**\n     * Call Register Hooks\n     *\n     * @param  {CoreModule} moduleInstantiated\n     * @returns Observable\n     */\n    private static callRegister(moduleInstantiated: CoreModule): Observable<CoreModule> {\n        return Observable\n            .from(ModuleManager.getModules(moduleInstantiated))\n            .filter(_ => _.level !== ModuleLevel.ROOT)\n            .filter(_ => HookManager\n                .hasLifecycleHook(ModuleEnum.OnRegister.toString(), _.token)\n            )\n            .flatMap(_ => HookManager\n                .triggerHook(ModuleEnum.OnRegister.toString(), _.token, _.instance)\n            )\n            .toArray()\n            .map(_ => moduleInstantiated)\n    }\n\n    /**\n     * Call Start Hooks\n     *\n     * @param  {CoreModule} moduleInstantiated\n     * @returns Observable\n     */\n    private static callStart(moduleInstantiated: CoreModule): Observable<void> {\n        return Observable\n            .of(moduleInstantiated)\n            .flatMap(_ => HookManager\n                .triggerHook(\n                    ModuleEnum.OnStart.toString(),\n                    moduleInstantiated.token,\n                    moduleInstantiated.instance,\n                    null,\n                    false\n                )\n            );\n    }\n\n    /**\n     * Check if the provided module\n     * is right\n     *\n     * @param  {Type<any>} module\n     * @returns Observable\n     */\n    private static checkArg(module: Type<any>): Observable<Type<any>> {\n        return Observable\n            .of(module)\n            .do(_ => this.module = null)\n            .do(_ => this.extensions = null)\n            .flatMap(_ => !!_ ?\n                Observable.of(_) :\n                Observable.throw(new Error('Bootstrap failed: no module provided'))\n            )\n            .flatMap(_ => typeof _ === 'function' ?\n                Observable.of(_) :\n                Observable.throw(new Error('Bootstrap failed: module must be a function/class'))\n            );\n    }\n\n    /**\n     * Convert an extension type to ExtensionWithConfig\n     *\n     * @param  {} extension\n     * @returns ExtensionWithConfig\n     */\n    private static toExtensionWithConfig(extension): ExtensionWithConfig {\n        if (extension && <ExtensionWithConfig>extension.token) {\n            return <ExtensionWithConfig>extension;\n        }\n        return {\n            token: <Type<any>>extension,\n            config: {}\n        };\n    }\n\n    /**\n     * Call the OnExtensionLoad hook\n     * of an extension\n     *\n     * @param  {ExtensionWithConfig} extension\n     * @returns Observable\n     */\n    private static loadExtention(extension: ExtensionWithConfig, module: CoreModule, options: BootstrapOptions): Observable<Extension> {\n        return Observable\n            .of(Reflect.construct(extension.token, []))\n            .do(_ => this.logger.debug(`loading ${extension.token.name}`))\n            .switchMap(instance =>\n                HookManager\n                    .triggerHook(\n                        ExtentionHooksEnum.OnExtensionLoad.toString(),\n                        extension.token,\n                        instance,\n                        [ module, extension.config ]\n                    )\n                    .timeout(options.extensionTimeout || this.defaultTimeout)\n                    .catch(_ => {\n                        if (process.env.NODE_ENV !== 'test') {\n                            setTimeout(() => process.exit(1), 1000);\n                        }\n                        return Observable.throw(_);\n                    })\n            )\n            .do(_ => this.extensions = []\n                .concat(this.extensions, _)\n                .filter(__ => !!__)\n            );\n    }\n\n    /**\n     * Call the OnModuleInstantiated hook\n     * of an extension\n     *\n     * @param  {Extension} extension\n     * @returns Observable\n     */\n    private static moduleInstantiated(extension: Extension, module: CoreModule): Observable<void> {\n        return HookManager\n            .triggerHook(\n                ExtentionHooksEnum.OnModuleInstantiated.toString(),\n                extension.token,\n                extension.instance,\n                [ module, extension.value ]\n            )\n            .do(_ => this.logger.debug(`moduleInstantiated ${extension.token.name}`))\n            .defaultIfEmpty(null);\n    }\n\n}\n\n/**\n * Error handler\n * Call onError of Root module\n * Or log in console\n *\n * @param  {Error} error\n * @param  {any} data\n * @returns void\n */\nexport function errorHandler(error: Error, data?: any): void {\n    Observable\n        .of(Hapiness['module'])\n        .filter(_ => !!(_ && _.instance))\n        .flatMap(_ =>\n            HookManager\n                .hasLifecycleHook(ModuleEnum.OnError.toString(), _.token) ?\n            HookManager\n                .triggerHook(\n                    ModuleEnum.OnError.toString(),\n                    _.token,\n                    _.instance,\n                    [ error, data ],\n                    false\n                ) :\n                Observable\n                    .throw(error)\n        )\n        .subscribe(null, _ => console.error(_));\n}\n"]}