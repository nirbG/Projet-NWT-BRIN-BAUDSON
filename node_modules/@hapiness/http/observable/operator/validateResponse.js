"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Subscriber_1 = require("rxjs/Subscriber");
const biim_1 = require("@hapiness/biim");
const Joi = require("joi");
/**
 * New observable operator
 *
 * @param schema {Joi.Schema} - Joi Schema to validate the body response
 * @param ignoreStatusCodes - statusCodes to ignore while creating Biim error
 *
 * @return {Observable<T>|WebSocketSubject<T>}
 */
function validateResponse(schema = Joi.any(), ignoreStatusCodes = []) {
    return higherOrder(schema, ignoreStatusCodes)(this);
}
exports.validateResponse = validateResponse;
function higherOrder(schema, ignoreStatusCodes) {
    return (source) => source.lift(new ValidateResponseOperator(schema, ignoreStatusCodes));
}
/**
 * Operator class definition
 */
class ValidateResponseOperator {
    /**
     * Class constructor
     *
     * @param _schema {Joi.Schema}
     * @param _ignoreStatusCodes {number[]}
     */
    constructor(_schema, _ignoreStatusCodes) {
        this._schema = _schema;
        this._ignoreStatusCodes = _ignoreStatusCodes;
    }
    /**
     * Function calls when operator is executing
     *
     * @param subscriber current subscriber
     * @param source subscriber source
     *
     * @return {AnonymousSubscription|Subscription|Promise<PushSubscription>|TeardownLogic}
     */
    call(subscriber, source) {
        return source.subscribe(new ValidateResponseSubscriber(subscriber, this._schema, this._ignoreStatusCodes));
    }
}
/**
 * Operator subscriber class definition
 */
class ValidateResponseSubscriber extends Subscriber_1.Subscriber {
    /**
     * Class constructor
     *
     * @param destination subscriber destination
     * @param _source subscriber source
     * @param _schema {Joi.Schema}
     * @param _ignoreStatusCodes {number[]}
     */
    constructor(destination, _schema, _ignoreStatusCodes) {
        super(destination);
        this._schema = _schema;
        this._ignoreStatusCodes = _ignoreStatusCodes;
    }
    /**
     * Function to send result to next subscriber
     *
     * @param data result for next subscriber
     *
     * @private
     */
    _next(data) {
        if (!!data.response) {
            if (data.response.statusCode >= 400 &&
                this._ignoreStatusCodes.indexOf(data.response.statusCode) < 0) {
                if (typeof data.body !== 'object') {
                    data.body = { message: data.body };
                }
                this.destination.error(biim_1.Biim.create(data.response.statusCode, data.body.message, data.body, data.body));
            }
            else {
                const res = Joi.validate(data.body, this._schema, {
                    stripUnknown: {
                        arrays: false,
                        objects: true,
                    }
                });
                if (!!res.error) {
                    this.destination.error(biim_1.Biim.wrap(res.error));
                }
                else {
                    this.destination.next(res.value);
                    this.destination.complete();
                }
            }
        }
    }
}
//# sourceMappingURL=validateResponse.js.map