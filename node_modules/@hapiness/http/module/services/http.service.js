"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@hapiness/core");
const rx_http_request_1 = require("@akanass/rx-http-request");
exports.RxCookieJar = rx_http_request_1.RxCookieJar;
let HttpService = class HttpService {
    /**
     * Service constructor
     */
    constructor() {
        this._rxHR = rx_http_request_1.RxHR;
    }
    /**
     * Function to get the HTTP request object
     *
     * @return {RequestAPI<Request, CoreOptions, RequiredUriUrl>}
     */
    get request() {
        return this._rxHR.request;
    }
    /**
     * Function to do a GET HTTP request and to return a buffer
     *
     * @param uri
     * @param options
     *
     * @return {Observable<RxHttpRequestResponse>}
     */
    getBuffer(uri, options) {
        return this._rxHR.getBuffer(uri, options);
    }
    /**
     * Function to do a GET HTTP request
     *
     * @param uri {string}
     * @param options {CoreOptions}
     *
     * @return {Observable<RxHttpRequestResponse>}
     */
    get(uri, options) {
        return this._rxHR.get(uri, options);
    }
    /**
     * Function to do a POST HTTP request
     *
     * @param uri {string}
     * @param options {CoreOptions}
     *
     * @return {Observable<RxHttpRequestResponse>}
     */
    post(uri, options) {
        return this._rxHR.post(uri, options);
    }
    /**
     * Function to do a PUT HTTP request
     *
     * @param uri {string}
     * @param options {CoreOptions}
     *
     * @return {Observable<RxHttpRequestResponse>}
     */
    put(uri, options) {
        return this._rxHR.put(uri, options);
    }
    /**
     * Function to do a PATCH HTTP request
     *
     * @param uri {string}
     * @param options {CoreOptions}
     *
     * @return {Observable<RxHttpRequestResponse>}
     */
    patch(uri, options) {
        return this._rxHR.patch(uri, options);
    }
    /**
     * Function to do a DELETE HTTP request
     *
     * @param uri {string}
     * @param options {CoreOptions}
     *
     * @return {Observable<RxHttpRequestResponse>}
     */
    delete(uri, options) {
        return this._rxHR.delete(uri, options);
    }
    /**
     * Function to do a HEAD HTTP request
     *
     * @param uri {string}
     * @param options {CoreOptions}
     *
     * @return {Observable<RxHttpRequestResponse>}
     */
    head(uri, options) {
        return this._rxHR.head(uri, options);
    }
    /**
     * Function that creates a new rx cookie jar
     *
     * @return {Observable<RxCookieJar>}
     */
    jar() {
        return this._rxHR.jar();
    }
    /**
     * Function that creates a new cookie
     *
     * @param str {string}
     *
     * @return {Observable<Cookie>}
     */
    cookie(str) {
        return this._rxHR.cookie(str);
    }
};
HttpService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], HttpService);
exports.HttpService = HttpService;
//# sourceMappingURL=http.service.js.map