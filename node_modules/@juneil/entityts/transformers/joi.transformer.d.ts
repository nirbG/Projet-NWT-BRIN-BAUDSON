import * as Joi from 'joi';
import { PropertyMetadata } from '../lib/decorators';
import { BaseEntity, EntityTransformer, EntityOptions } from '../lib/entity';
export { ObjectSchema as SchemaType } from 'joi';
export declare class JoiTransformer implements EntityTransformer<Joi.ObjectSchema | Joi.ArraySchema> {
    private objectIdRegex;
    build(source: PropertyMetadata[], opts: EntityOptions, more?: Joi.ObjectSchema, parent?: BaseEntity): Joi.ObjectSchema | Joi.ArraySchema;
    isValid(data: BaseEntity, schema: Joi.ObjectSchema): boolean;
    validate(data: any, schema: Joi.ObjectSchema): Joi.ValidationResult<any>;
    /**
     * Merge all rules and
     * reduce to an Object Schema
     *
     * @param  {PropertySchema[]} source
     * @returns Joi.ObjectSchema
     */
    private reduceSchema;
    /**
     * Property handler
     * Get the base schema
     * and map all rules in joi schema
     *
     * @param  {PropertyMetadata} source
     * @param  {ModeEnum} mode
     * @returns PropertySchema
     */
    private propertyHandler;
    /**
     * Rule handler
     * Call the right mapper for
     * a decorator's key
     *
     * @param  {PropertyRule} rule
     * @param  {ModeEnum} mode
     * @param  {Joi.Schema} base
     * @returns Joi.Schema
     */
    private ruleHandler;
    /**
     * Type mapping
     *
     * @param  {PropertyRule} rule
     * @returns Joi.Schema
     */
    private typeMapper;
    /**
     * Require mapping
     *
     * @param  {PropertyRule} rule
     * @param  {ModeEnum} mode
     * @returns Joi.Schema
     */
    private requireMapper;
    /**
     * Strip mapping
     *
     * @param  {PropertyRule} rule
     * @param  {ModeEnum} mode
     * @returns Joi.Schema
     */
    private stripMapper;
    /**
     * Valid mapping
     *
     * @param  {PropertyRule} rule
     * @returns Joi.Schema
     */
    private validMapper;
    /**
     * Invalid mapping
     *
     * @param  {PropertyRule} rule
     * @returns Joi.Schema
     */
    private invalidMapper;
    /**
     * Allow mapping
     *
     * @param  {PropertyRule} rule
     * @returns Joi.Schema
     */
    private allowMapper;
    /**
     * Description mapping
     *
     * @param  {PropertyRule} rule
     * @returns Joi.Schema
     */
    private descriptionMapper;
    /**
     * Min mapping
     *
     * @param  {PropertyRule} rule
     * @param  {Joi.Schema} base
     * @returns Joi.Schema
     */
    private minMapper;
    /**
     * Max mapping
     *
     * @param  {PropertyRule} rule
     * @param  {Joi.Schema} base
     * @returns Joi.Schema
     */
    private maxMapper;
    /**
     * Length mapping
     *
     * @param  {PropertyRule} rule
     * @param  {Joi.Schema} base
     * @returns Joi.Schema
     */
    private lengthMapper;
    /**
     * Object Pattern mapping
     *
     * @param  {PropertyRule} rule
     * @returns Joi.Schema
     */
    private objectPatternMapper;
    /**
     * Regex mapping
     *
     * @param  {PropertyRule} rule
     * @returns Joi.Schema
     */
    private regexMapper;
}
