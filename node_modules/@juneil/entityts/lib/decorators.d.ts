/// <reference types="node" />
import 'reflect-metadata';
import { TypeEnum, ModeEnum } from './enums';
export declare type PropertyType = String | Number | Date | Object | Boolean | Buffer | TypeEnum;
export declare type DecoratorFunc = (target: Object, propertyName: string) => void;
export interface PropertyMetadata {
    property: string;
    rules: [PropertyRule];
}
export interface PropertyRule {
    key: symbol;
    value: any;
}
/**
 * Decorator @Type()
 * Determine the property type
 * for validation
 *
 * @param  {PropertyType} type
 * @returns DecoratorFunc
 */
export declare function Type(type: PropertyType): DecoratorFunc;
/**
 * Decorator @Array()
 * Determine the property type
 * for validation
 *
 * @param  {PropertyType} type
 * @returns DecoratorFunc
 */
export declare function Array(type: PropertyType): DecoratorFunc;
/**
 * Decorator @Required()
 * Set the requirement of the property
 *
 * @param  {ModeEnum[]} mode
 * @returns DecoratorFunc
 */
export declare function Required(...mode: ModeEnum[]): DecoratorFunc;
/**
 * Decorator @Strip()
 * Determine if the property
 * should be removed
 *
 * @param  {ModeEnum[]} mode
 * @returns DecoratorFunc
 */
export declare function Strip(...mode: ModeEnum[]): DecoratorFunc;
/**
 * Decorator @Valid()
 * Determine the values
 * allowed
 *
 * @param  {any[]} value
 * @returns DecoratorFunc
 */
export declare function Valid(...value: any[]): DecoratorFunc;
/**
 * Decorator @Invalid()
 * Determine the values
 * only allowed
 *
 * @param  {any[]} value
 * @returns DecoratorFunc
 */
export declare function Invalid(...value: any[]): DecoratorFunc;
/**
 * Decorator @Allow()
 * Determine the values
 * allowed
 *
 * @param  {any[]} value
 * @returns DecoratorFunc
 */
export declare function Allow(...value: any[]): DecoratorFunc;
/**
 * Decorator @Description()
 * Describe the property
 *
 * @param  {string} description
 * @returns DecoratorFunc
 */
export declare function Description(description: string): DecoratorFunc;
/**
 * Decorator @Min()
 * Set a min validation
 *
 * @param  {number} value
 * @returns DecoratorFunc
 */
export declare function Min(value: number): DecoratorFunc;
/**
 * Decorator @Max()
 * Set a max validation
 *
 * @param  {number} value
 * @returns DecoratorFunc
 */
export declare function Max(value: number): DecoratorFunc;
/**
 * Decorator @Length()
 * Set a length validation
 *
 * @param  {number} value
 * @returns DecoratorFunc
 */
export declare function Length(value: number): DecoratorFunc;
/**
 * Decorator @ObjectPattern()
 *
 * @param  {RegExp} pattern
 * @param  {PropertyType} schema
 * @returns DecoratorFunc
 */
export declare function ObjectPattern(pattern: RegExp, schema: PropertyType): DecoratorFunc;
/**
 * Decorator @Regex()
 *
 * @param  {RegExp} pattern
 * @returns DecoratorFunc
 */
export declare function Regex(pattern: RegExp): DecoratorFunc;
