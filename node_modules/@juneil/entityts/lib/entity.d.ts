import { PropertyMetadata } from './decorators';
import { ModeEnum, TypeEnum } from './enums';
import { JoiTransformer } from '../transformers/joi.transformer';
export interface EntityOptions {
    strict?: boolean;
    mode?: ModeEnum;
    array?: boolean;
    unknown?: boolean;
}
export interface EntityTransformer<T> {
    build: (source: PropertyMetadata[], opts: EntityOptions, more?: T, parent?: BaseEntity) => T;
    isValid: (value: BaseEntity, schema: T) => boolean;
    validate: (value: BaseEntity, schema: T) => {
        value: any;
        error: Error;
    };
}
export declare class EntityRef {
    ref: string;
    constructor(ref: string);
}
export declare class BaseEntity {
    static Mode: typeof ModeEnum;
    static Type: typeof TypeEnum;
    protected static parent: any;
    protected static transformers: EntityTransformer<any>[];
    protected static more(): void;
    /**
     * Get schema
     * @todo Implement the transformers system
     * @param  {ModeEnum=ModeEnum.READ} mode
     * @returns T
     */
    static schema<T>(opts?: ModeEnum | EntityOptions): T;
    /**
     * Do a reference to another property
     *
     * @param  {string} ref
     * @returns EntityRef
     */
    static ref(ref: string): EntityRef;
    /**
     * Try to populate the Entity with
     * a provided payload
     *
     * @constructor
     * @param  {} payload={}
     */
    constructor(payload?: {}, options?: EntityOptions);
    /**
     * Check if the entity instance is valid
     *
     * @param  {ModeEnum=ModeEnum.READ} mode
     * @returns boolean
     */
    isValid(mode?: ModeEnum): boolean;
    /**
     * Get schema
     *
     * @param  {ModeEnum} mode
     */
    schema<T>(opts?: ModeEnum | EntityOptions): T;
}
export declare type Constructor<T> = new (...args: any[]) => T;
/**
 * Mixin to link Tranformers
 *
 * @param  {Constructor<Object>[]} ...transformers
 */
export declare function EntityTo(...transformers: Constructor<Object>[]): {
    new (payload?: {}, options?: EntityOptions): {
        /**
         * Check if the entity instance is valid
         *
         * @param  {ModeEnum=ModeEnum.READ} mode
         * @returns boolean
         */
        isValid(mode?: ModeEnum): boolean;
        /**
         * Get schema
         *
         * @param  {ModeEnum} mode
         */
        schema<T>(opts?: ModeEnum | EntityOptions): T;
    };
    transformers: EntityTransformer<any>[];
    parent: any;
    more(): void;
    Mode: typeof ModeEnum;
    Type: typeof TypeEnum;
    /**
     * Get schema
     * @todo Implement the transformers system
     * @param  {ModeEnum=ModeEnum.READ} mode
     * @returns T
     */
    schema<T>(opts?: ModeEnum | EntityOptions): T;
    /**
     * Do a reference to another property
     *
     * @param  {string} ref
     * @returns EntityRef
     */
    ref(ref: string): EntityRef;
};
export declare const Entity: {
    new (payload?: {}, options?: EntityOptions): {
        /**
         * Check if the entity instance is valid
         *
         * @param  {ModeEnum=ModeEnum.READ} mode
         * @returns boolean
         */
        isValid(mode?: ModeEnum): boolean;
        /**
         * Get schema
         *
         * @param  {ModeEnum} mode
         */
        schema<T>(opts?: ModeEnum | EntityOptions): T;
    };
    transformers: EntityTransformer<any>[];
    parent: any;
    more(): void;
    Mode: typeof ModeEnum;
    Type: typeof TypeEnum;
    /**
     * Get schema
     * @todo Implement the transformers system
     * @param  {ModeEnum=ModeEnum.READ} mode
     * @returns T
     */
    schema<T>(opts?: ModeEnum | EntityOptions): T;
    /**
     * Do a reference to another property
     *
     * @param  {string} ref
     * @returns EntityRef
     */
    ref(ref: string): EntityRef;
};
export declare function EntityExtends(parent: any): {
    new (payload?: {}, options?: EntityOptions): {
        /**
         * Check if the entity instance is valid
         *
         * @param  {ModeEnum=ModeEnum.READ} mode
         * @returns boolean
         */
        isValid(mode?: ModeEnum): boolean;
        /**
         * Get schema
         *
         * @param  {ModeEnum} mode
         */
        schema<T>(opts?: ModeEnum | EntityOptions): T;
    };
    transformers: JoiTransformer[];
    parent: any;
    more(): void;
    Mode: typeof ModeEnum;
    Type: typeof TypeEnum;
    /**
     * Get schema
     * @todo Implement the transformers system
     * @param  {ModeEnum=ModeEnum.READ} mode
     * @returns T
     */
    schema<T>(opts?: ModeEnum | EntityOptions): T;
    /**
     * Do a reference to another property
     *
     * @param  {string} ref
     * @returns EntityRef
     */
    ref(ref: string): EntityRef;
};
